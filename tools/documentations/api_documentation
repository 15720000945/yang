User will sign in to database with table created in mysql with following columns:
+----------------+--------------+------+-----+---------+----------------+
| Field          | Type         | Null | Key | Default | Extra          |
+----------------+--------------+------+-----+---------+----------------+
| Id             | int(11)      | NO   | PRI | NULL    | auto_increment |
| Username       | varchar(255) | NO   |     | NULL    |                |
| Password       | varchar(255) | NO   |     | NULL    |                |
| Email          | varchar(255) | YES  |     | NULL    |                |
| ModelsProvider | varchar(255) | YES  |     | NULL    |                |
| FirstName      | varchar(255) | YES  |     | NULL    |                |
| LastName       | varchar(255) | YES  |     | NULL    |                |
| AccessRights   | varchar(255) | YES  |     | NULL    |                |
+----------------+--------------+------+-----+---------+----------------+

Once he is singed in he can do PUT request on path http://yangcatalog.org/platforms
with body example:
{
  "platforms": [
       {
         "vendor": "cisco",
         "name": "NX-OSv",
         "capabilities_file":{
            "repository": "yang",
            "owner": "miroslavKovacPantheon",
            "path": "vendor/cisco/xe/1641/cat3k-netconf-capability.xml"
        },
         "models": [
                     "N9K-NXOSV"
         ],
         "software-flavor": "ALL",
         "software-version": "1641",
         "os-type": "NX-OS"
       }
     ]
}
Authorization will be checked for username password and if this specific user
can write to a specific branch according to AccessRights column which starts with '/' and continue according to
yang-catalog.yang vendors branch. For example: '/', '/cisco', '/cisco/NX-OSv/1641/ALL'

If user didn`t pass authentication, 401 unauthorized will be sent. Otherwise github GET request with body
https://api.github.com/repos/miroslavKovacPantheon/yang/contents/vendor/cisco/xe/1641
for this example will follow. This will give us list of metadata for each file contained in that specific directory,
like name of file, download_url with raw file, type whether it is folder or file. If it is file with suffix '.yang'
we will create a file with its filename in temp directory. If it is folder we will recursively find files in those
folders. Hello message xml file and json request is also contained in that temporary folder.

When we have all the files we call our populate script which will parse and populate the yangcatalog.org database.


Another use case is SDOs. Here we are expecting a json request which is formatted according to yang-catalog.yang. Person
would be then authenticated and data would be sent to yangcatalog.org